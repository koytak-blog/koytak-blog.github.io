マルチスレッドの設計と実装
	序章
		はじめに
		マルチスレッドの基礎
		マルチスレッドの目的
		はじめてのマルチスレッドプログラム
	バッチアプリ
		はじめに
		マルチスレッド化の戦略
		パフォーマンスが向上するケース
		パフォーマンスが阻害されるケース
		プログラミング
			べたな書き方
			TPL
			PLINQ
	クライアントアプリ
		はじめに
		メッセージループ
		Web アプリ（フロントエンド）
		プログラミング
			非同期の要件
			Task-based Asynchronous Pattern
			Event-based Asynchronous Pattern
			Asynchronous Programming Model
			async/await
	サービスアプリ
		はじめに
		スレッドプール
		Web アプリ（バックエンド）
		プログラミング
	高度な話題
		同期のデザイン
			Two Phase Termination/遅延取消し
			モデル
				ボスワーカモデル
					生産者／消費者
					スレッドプール
				ピアモデル
				パイプラインモデル
			スレッドプール
			セマフォ
			非同期デザイン
			ガード条件、スレッドプール、
		実装考慮点
			最適化
				volatile
			レースコンディション
			アセンブリレベルで一命令
			UIの操作
				スレッドセーフ
			デッドロック防止
			防衛的プログラミング
		非同期IO/完了ポート
	性能
		性能指標
			スループット
			レスポンスタイム
			リソース使用率
			ワークロード
		グラフの形状
			グラフの形状
				理論上のグラフ
				現実のグラフ
			グラフの形状を理解する事の意味
			飽和点
				一番先に飽和するリソースは
			思考時間の考慮
			スループット
				飽和点以降はスレッド数に依存せず一定
				飽和点以前はスレッド数に応じて増加
					1/R の傾き
			レスポンスタイム
				飽和点以降はスレッド数に比例して増加
				飽和点以前は一定
		スループット
			スループットの特性
				リソース量に比例
				リソースが飽和すると一定
			改善の為の対策
				リソースの節約による改善
				リソースの増強による改善
		レスポンスタイム
			レスポンスタイムの特性
				設計に依存
					処理量に依存
				リソース量の影響は低い
				リソースが飽和すると、ユーザー数に比例して増加
			改善の為の対策
				処理量を削減
				待機時間を削減
				処理の並列化
-------------------------------
マルチスレッド
	基礎用語
		並列と並行
	性能基礎
	バッチアプリケーション
		バッチアプリケーション
		並列化の手法
			タスク並列
			データ並列
	デスクトップアプリケーション
（非同期プログラミング）
	サーバーアプリケーション
	Tips & Tricks
	その他
		C# を利用
			マルチパラダイム
		対象読者
			プログラミングの経験がある
				複数のプログラミング言語の経験がある
			マルチスレッドプログラミングの基本は理解している
--------------------------------
設計考慮
	並列と並行
		parallel (並列)
			複数の別々のプロセッサが、複数の処理を同時実行する
		Concurrent(並行)
			一つのプロセッサがコンテキストを切り替えながら、複数の処理を同時実行する
	スレッドの種類
		役割による分類１
			メインスレッド
			マニュアルスレッド
			プールスレッド
			アンマネージドスレッド
			その他のスレッド
		役割による分類２
			UIスレッド
			ワーカースレッド
			タスクスレッド
		属性による分類
			FGスレッド
			BGスレッド
			【説明】
				この属性はOSのスケジューリングアルゴリズムや終了ポリシーなどに影響する
	同期のデザイン
		Two Phase Termination/遅延取消し
		モデル
			ボスワーカモデル
				生産者／消費者
				スレッドプール
			ピアモデル
			パイプラインモデル
		スレッドプール
		セマフォ
		非同期デザイン
		ガード条件、スレッドプール、
	実装考慮点
		最適化
			volatile
		レースコンディション
		アセンブリレベルで一命令
		UIの操作
			スレッドセーフ
		デッドロック防止
		防衛的プログラミング
	【未分類】
		非同期IOと非同期プログラミング
		メッセージループ
		OSレベルのスレッドの考慮点
	設計考慮点
		パフォーマンス
			応答性
			多重度
			スループット
	Win32
		同期クラス
			インターロック
			クリティカルセクション
			セマフォ
			イベント
			ミューテックス
		用語
			飢餓状態(starvation)
			競合状態(race condition)
			優先度の逆転
			アイドル
			ゼロページスレッド
			スレッドの優先度
			スレッドの相対優先度
			ダイナミックブースト
			カーネルモード、ユーザーモード
			アフィニティ
			コンテキストスイッチ
			スレッド状態
			タイムスライシング
			非同期IO／完了ポート
			スレッドスレジューリング
				優先度の低いスレッドへのスケジューリング
		TIPS
			〔.NET〕 Abortがブロックする
				finally句実行中はAbortを受け取らない（ロストする？）
				アンマネージドはAbortを受け取らない（アンマネージドを抜けると遅延で受け取る）
	マルチスレッドのデバッグ
	同期と通信
		同期オブジェクト
			    インターロック
			    クリティカルセクション
			    セマフォ
			    イベント
			    ミューテックス
			条件変数
		同期のデザイン
			Two Phase Termination/遅延取消し
			  モデル
			    ボスワーカモデル
			        生産者／消費者
			        スレッドプール
			    ピアモデル
			    パイプラインモデル
			  スレッドプール
			  セマフォ
			  非同期デザイン
			  ガード条件